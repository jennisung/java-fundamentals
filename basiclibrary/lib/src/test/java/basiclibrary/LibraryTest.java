/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.List;



class LibraryTest {
    @Test
    void diceRollTest() {
        Library library = new Library();
        int[] rolls = library.roll(4);
        assertEquals(4, rolls.length, "Array length should be 4");
    }


    @Test
    void duplicateTest() {

        Library library = new Library();
        int[] firstTest = {1, 2, 3, 4, 5};
        assertFalse(library.hasDuplicates(firstTest), "No duplicates");

        int[] secondTest = {1, 1, 2, 4, 5};
        assertTrue(library.hasDuplicates(secondTest), "Duplicates in Array");
    }


    @Test
    void calcAvgTest() {

        Library library = new Library();
        int[] testArray = {1, 2, 3, 4, 5};

        double expectedAvg = 3;
        double actualAvg = library.calcAverage(testArray);

        assertEquals(expectedAvg, actualAvg, "Average match");
    }

//    @Test
//    void lowAvgTest() {
//        Library library = new Library();
//
//        int[][] weeklyMonthTemperatures = {
//                {66, 64, 58, 65, 71, 57, 60},
//                {57, 65, 65, 70, 72, 65, 51},
//                {55, 54, 60, 53, 59, 57, 61},
//                {65, 56, 55, 52, 55, 62, 57}
//        };
//
//        int[] lowestAvgArray = {57, 65, 65, 70, 72, 65, 51};
//        int[] actualOutput = library.lowestAvg(weeklyMonthTemperatures);
//
//        assertArrayEquals(lowestAvgArray, actualOutput, "Lowest average");
//    }


    @Test
    void analyzeWeatherDataTest() {

        Library library = new Library();
        int[][] weatherTemps = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };


        String correctWeather = "High: 72\n" +
                "Low: 51\n" +
                "No temperature seen during month: 63\n" +
                "No temperature seen during month: 67\n" +
                "No temperature seen during month: 68\n" +
                "No temperature seen during month: 69\n";

        String actualOutput = library.analyzeWeather(weatherTemps);

        assertEquals(correctWeather, actualOutput, "Weather match");
    }


    @Test
    void tallyElectionDataTest() {
        Library library = new Library();
        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        String winnerExample = "Bush";
        String winner = library.tally(votes);

        assertEquals(winnerExample, winner, "Winner match");
    }


}
